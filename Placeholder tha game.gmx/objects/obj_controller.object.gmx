<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.stage_curr="mainmenu";
global.rzutready=false;
global.rzutmoc=alarm[0];
global.rzutk=1;
global.insiderzut=false;
//Punkty
global.points1=0;
global.points2=0;
global.throwing=false;
//Faule
global.fouls1=0;
global.fouls2=0;
//Ball
global.ball="free";
global.ballx=0;
global.bally=0;
global.zbiorka=false;
Debug=false;
mapping=false;
mplayer=0;
mkey=1;
shake=false;
time=180;
win_message="Tie !";
winpercent=50;


ini_open("game.ini");
ini_write_string("test","test","test");
ini_section_delete("test");
if (!ini_section_exists("Controlls"))
{
    ini_write_string("Controlls","P1_left","left");
    ini_write_string("Controlls","P1_right","right");  
    ini_write_string("Controlls","P1_up","up");  
    ini_write_string("Controlls","P1_down","down");  
    ini_write_string("Controlls","P1_throw","ctrl");
    ini_write_string("Controlls","P1_hit","shift");
    
    ini_write_string("Controlls","P2_left","A");
    ini_write_string("Controlls","P2_right","D");  
    ini_write_string("Controlls","P2_up","W");  
    ini_write_string("Controlls","P2_down","S");  
    ini_write_string("Controlls","P2_throw","space");
    ini_write_string("Controlls","P2_hit","alt");
}
//Keys
global.p1left=scr_convert(ini_read_string("Controlls","P1_left","left"),0)
global.p1right=scr_convert(ini_read_string("Controlls","P1_right","right"),0)
global.p1up=scr_convert(ini_read_string("Controlls","P1_up","up"),0)
global.p1down=scr_convert(ini_read_string("Controlls","P1_down","down"),0)
global.p1throw=scr_convert(ini_read_string("Controlls","P1_throw","ctrl"),0)
global.p1wybicie=scr_convert(ini_read_string("Controlls","P1_hit","shift"),0)
//P2
global.p2left=scr_convert(ini_read_string("Controlls","P2_left","A"),0)
global.p2right=scr_convert(ini_read_string("Controlls","P2_right","D"),0)
global.p2up=scr_convert(ini_read_string("Controlls","P2_up","W"),0)
global.p2down=scr_convert(ini_read_string("Controlls","P2_down","S"),0)
global.p2throw=scr_convert(ini_read_string("Controlls","P2_throw","space"),0)
global.p2wybicie=scr_convert(ini_read_string("Controlls","P2_hit","alt"),0)
          
ini_close();
global.widok=0;

gj_init("123485" , "7eaafccf98473ebe4c12a5261a2573c9" );



obj_controller.alarm[5]=30;





</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Vibration stop
gamepad_set_vibration(0, 0, 0);
gamepad_set_vibration(1, 0, 0);
gamepad_set_vibration(2, 0, 0);
gamepad_set_vibration(3, 0, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Czas
if (time==0)
{
    scr_game_end();
}
else
{
    time--;
    alarm[4]=room_speed;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Odmrozenie
physics_pause_enable(false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Screnshake turnoffer
gamepad_set_vibration(0, 0, 0);
gamepad_set_vibration(1, 0, 0);
shake=false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>scr_reload_keys</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Wyrzut alarm (moc)
if (obj_player.ch_Kthrow or obj_player_2.ch_Kthrow)
{
alarm[0]=45;
show_debug_message("Rzut_Max_Alarm!");
if (global.rzutk==1) global.rzutk=0;
else global.rzutk =1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*-------------------------SCREEENSHAKE BABYYY-------------------------------*/

if (shake) 
    {
    view_angle[0]+= random_range(-0.15, 0.15);
    if (view_angle[0]&gt;0.8) view_angle[0]=0.8;
    else if (view_angle[0]&lt;-0.8) view_angle[0]=-0.8;
    }
else view_angle[0]=0;

/*----------------------------------------------------------------------------*/



if (instance_exists(obj_player_par))
{
    if (obj_player.have_ball=true)
        {
           if (obj_player.obrot=0)
           {
           global.ballx=obj_player.x+27;
           global.bally=obj_player.y;  
           }
           else
           {
           global.ballx=obj_player.x-27;
           global.bally=obj_player.y;     
           }
        }
        
    else if (instance_exists(obj_player_2))
        {
            if (obj_player_2.have_ball=true)
            {
                if (obj_player_2.obrot=0)
                {
                   global.ballx=obj_player_2.x+27;
                   global.bally=obj_player_2.y;  
               }
               else
               {
                   global.ballx=obj_player_2.x-27;
                   global.bally=obj_player_2.y;     
               }
            }
        }
    if (obj_player.throwing=true or obj_player_2.throwing=true) global.throwing=true;
    else global.throwing=false;
    
    if (collision_rectangle(obj_ball_wybicie.x,obj_ball_wybicie.y,obj_ball_wybicie.x+20,obj_ball_wybicie.y+30,obj_obrecz_par,1,1))
    global.insiderzut=true;
else
    global.insiderzut=false;

} 

     
//Mapping keys  
if (mapping and keyboard_check_released(vk_anykey) and keyboard_lastkey!=-1)
{
ini_open("game.ini");
    if (mplayer==1)
    {
        switch (mkey)
        {
            case 1: global.p1up=keyboard_lastkey; ini_write_string("Controlls","P1_up",scr_convert(keyboard_lastkey,1)); break;
            case 2: global.p1left=keyboard_lastkey; ini_write_string("Controlls","P1_left",scr_convert(keyboard_lastkey,1)); break;
            case 3: global.p1down=keyboard_lastkey; ini_write_string("Controlls","P1_down",scr_convert(keyboard_lastkey,1)); break;
            case 4: global.p1right=keyboard_lastkey; ini_write_string("Controlls","P1_right",scr_convert(keyboard_lastkey,1)); break;
            case 5: global.p1throw=keyboard_lastkey; ini_write_string("Controlls","P1_throw",scr_convert(keyboard_lastkey,1)); break;
            case 6: global.p1wybicie=keyboard_lastkey; ini_write_string("Controlls","P1_hit",scr_convert(keyboard_lastkey,1)); break;
        }    
    }
    else if (mplayer==2)
    {
        switch (mkey)
        {
            case 1: global.p2up=keyboard_lastkey; ini_write_string("Controlls","P2_up",scr_convert(keyboard_lastkey,1)); break;
            case 2: global.p2left=keyboard_lastkey; ini_write_string("Controlls","P2_left",scr_convert(keyboard_lastkey,1)); break;
            case 3: global.p2down=keyboard_lastkey; ini_write_string("Controlls","P2down",scr_convert(keyboard_lastkey,1)); break;
            case 4: global.p2right=keyboard_lastkey; ini_write_string("Controlls","P2_right",scr_convert(keyboard_lastkey,1)); break;
            case 5: global.p2throw=keyboard_lastkey; ini_write_string("Controlls","P2_throw",scr_convert(keyboard_lastkey,1)); break;
            case 6: global.p2wybicie=keyboard_lastkey; ini_write_string("Controlls","P2_hit",scr_convert(keyboard_lastkey,1)); break;
        }    
        
    }
    keyboard_lastkey=-1;
    mkey++;
    
    if (mkey==7) mapping = false;  
ini_close(); 
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (async_load[? "event_type"]= "gamepad discovered")
{
    show_debug_message("Gamepad Discovered:"+ gamepad_get_description(0)+string(gamepad_get_device_count()));
    if gamepad_is_connected(0) gamepad_set_axis_deadzone(0, 0.5);
    if gamepad_is_connected(1) gamepad_set_axis_deadzone(1, 0.5);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.widok=view_current;
if (instance_exists(obj_player_par))
{
    if (global.throwing and !global.insiderzut)
    {
        if (obj_player.have_ball=true)
            {
            if(global.rzutk==1)
                draw_healthbar(obj_player.x-8,obj_player.y-92,obj_player.x-5,obj_player.y-57,(45-alarm[0])/45*100,c_black,c_green,c_red,3,false,false);
            else if (global.rzutk==0)
                draw_healthbar(obj_player.x-8,obj_player.y-92,obj_player.x-5,obj_player.y-57,(alarm[0])/45*100,c_black,c_green,c_red,3,false,false);   
            draw_sprite(spr_bar,0,obj_player.x-12,obj_player.y-94);
            }
        else if (obj_player_2.have_ball=true)
            {
            if (global.rzutk==1)
                draw_healthbar(obj_player_2.x-8,obj_player_2.y-92,obj_player_2.x-5,obj_player_2.y-57,(45-alarm[0])/45*100,c_black,c_green,c_red,3,false,false);
            else if (global.rzutk==0)
                draw_healthbar(obj_player_2.x-8,obj_player_2.y-92,obj_player_2.x-5,obj_player_2.y-57,(alarm[0])/45*100,c_black,c_green,c_red,3,false,false);   
            draw_sprite(spr_bar,0,obj_player_2.x-12,obj_player_2.y-94);
            }
    }

    //Points
    draw_set_font(font_sb);
    draw_set_halign(fa_center);
    draw_sprite(spr_scoreboard,0,view_xview[view_current]+275,view_yview[view_current]);
    draw_text_colour(view_xview[view_current]+319,view_yview[view_current]+35,global.points1,c_white,c_white,c_white,c_white,1);
    draw_text_colour(view_xview[view_current]+view_wview[view_current]-319,view_yview[view_current]+35,global.points2,c_white,c_white,c_white,c_white,1);
    
    //TIME
    draw_text_colour(view_xview[view_current]+400,view_yview[view_current]+100,string(time div 60)+":"+string((time%60) div 10)+string((time%60)%10),c_white,c_white,c_white,c_white,1);
    
    //FOULS
    draw_text_colour(view_xview[view_current]+306,view_yview[view_current]+102,global.fouls1,c_white,c_white,c_white,c_white,1);
    draw_text_colour(view_xview[view_current]+view_wview[view_current]-306,view_yview[view_current]+102,global.fouls2,c_white,c_white,c_white,c_white,1);
    
    //SCOREBALL
    draw_healthbar(view_xview[view_current]+378, view_yview[view_current]+2, view_xview[view_current]+421, view_yview[view_current]+93, winpercent, make_colour_rgb(248, 35, 12), make_colour_rgb(18, 166, 245), make_colour_rgb(18, 166, 245), 1, true, false);
    draw_sprite(spr_pilkascore,0,view_xview[view_current]+378,view_yview[view_current]+2)
    
    /*
    //energy bars
    draw_healthbar(view_xview[global.widok]+10,view_yview[view_current],view_xview[global.widok]+50,view_yview[view_current]+10,
    obj_player.energy,c_black,c_yellow,c_red,0,false,false);
    
    draw_healthbar(view_xview[global.widok]+view_wview[global.widok]-60,view_yview[view_current],view_xview[global.widok]+view_wview[global.widok]-20,view_yview[view_current]+10,
    obj_player_2.energy,c_black,c_yellow,c_red,0,false,false);
    */
    
    
    //Arrows
    if (point_distance(view_xview[global.widok],0,obj_player.x,0)&gt;1 and point_distance(view_xview[global.widok]+view_wview[global.widok],0,obj_player.x,0)&gt;view_wview[global.widok]+1 )
        {
        draw_sprite_ext(spr_arrow,0,view_xview[view_current]+50,view_yview[view_current]+470,1,1,90,c_red,0.75 );
        }
    else if (point_distance(view_xview[global.widok]+view_wview[global.widok],0,obj_player.x,0)&gt;1 and point_distance(view_xview[global.widok],0,obj_player.x,0)&gt;view_wview[global.widok]+1 )
        {
        draw_sprite_ext(spr_arrow,0,view_xview[view_current]+view_wview[global.widok]-50,view_yview[view_current]+470,1,1,-90,c_red,0.75 );
        }
        
    if (point_distance(view_xview[global.widok],0,obj_player_2.x,0)&gt;1 and point_distance(view_xview[global.widok]+view_wview[global.widok],0,obj_player_2.x,0)&gt;view_wview[global.widok]+1 )
        {
        draw_sprite_ext(spr_arrow,0,view_xview[view_current]+50,view_yview[view_current]+420,1,1,90,c_blue,0.75 );
        }
    else if (point_distance(view_xview[global.widok]+view_wview[global.widok],0,obj_player_2.x,0)&gt;1 and point_distance(view_xview[global.widok],0,obj_player_2.x,0)&gt;view_wview[global.widok]+1 )
        {
        draw_sprite_ext(spr_arrow,0,view_xview[view_current]+view_wview[global.widok]-50,view_yview[view_current]+420,1,1,-90,c_blue,0.75 );
        }
    //Debug
    if (Debug)
    {
        draw_set_font(font_default);
        draw_set_halign(fa_left);
        draw_text(view_xview[view_current],view_yview[view_current]+12,"Prejump: "+ string(obj_player.prejump));
        draw_rectangle(obj_player.x-30,obj_player.y-30,obj_player.x+30,obj_player.y+70,true);//gracz
        draw_rectangle(obj_player.x-60,obj_player.y-5,obj_player.x-10,obj_player.y+20,true);//reka p1
        draw_rectangle(obj_player_2.x-50,obj_player_2.y-50,obj_player_2.x-10,obj_player_2.y,true);//reka p2
        draw_text(view_xview[view_current]+20,view_yview[view_current],"FPS: "+string(fps)+" RFPS: "+string(fps_real));
        draw_text(view_xview[view_current],view_yview[view_current]+24,"Jumping: "+string(obj_player.jumping));
        draw_text(view_xview[view_current],view_yview[view_current]+36,"Throwing: "+string(global.throwing));
        draw_text(view_xview[view_current],view_yview[view_current]+48,"Have_ball: "+string(obj_player.have_ball));
        draw_text(view_xview[view_current],view_yview[view_current]+60,"Lastkey: "+string(keyboard_lastkey));
        draw_text(view_xview[view_current],view_yview[view_current]+72,"player 1 speed: "+string(obj_player.phy_speed_x));
        draw_text(view_xview[view_current],view_yview[view_current]+84,"V1: "+string(view_visible[1]));
        draw_text(view_xview[view_current],view_yview[view_current]+96,"V2: "+string(view_visible[2]));
        draw_text(view_xview[view_current],view_yview[view_current]+108,"axislh: "+string(gamepad_axis_value(0, gp_axislh)));
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="84">
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>scr_newgame</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>game_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="81">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (Debug) Debug=false;
else Debug=true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.stage_curr=="options" and !mapping)
{
    global.stage_curr="mainmenu";
    obj_menu_controll.moving_l=true;
    obj_menu_controll.alarm[0]=20;
}
else if (global.stage_curr=="game")
{
global.stage_curr="mainmenu";
with (obj_menu_controll) instance_activate_object(self);
room_goto(R_mainmenu_v2);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
