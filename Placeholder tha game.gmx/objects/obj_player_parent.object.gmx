<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed=0.125;
move_speed=2000;
phy_fixed_rotation=true;
max_xspeed=5;
prejump=false;
jumping=false;
jump_force=-800;
have_ball=false;
throwing=false;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (jumping) sprite_index=Vspr_wybicie_midair_idle;
else sprite_index=Vspr_idle_woball;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>jumping=true;
prejump=false;
    if (have_ball)
        {
        sprite_index=Vspr_skok;
        }
    else
        {
        sprite_index=Vspr_skok_woball;
        }
    physics_apply_impulse(x,y,0,jump_force);
    alarm[0]=5;
    audio_play_sound(sd_pilka,0,0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!jumping and !prejump)
{
    if (have_ball)
        { 
        sprite_index=Vspr_idle ;
        show_debug_message("FAUUL");
        }
    else sprite_index=Vspr_idle_woball;
}
else 
    {
    alarm[0]=5;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>phy_speed_x=max(min(phy_speed_x,max_xspeed),-max_xspeed);
//wybijarka
if (have_ball)
{
    if (jumping)
        {
        obj_ball_wybicie.y=y-56;
        if (global.obrotp1=1) obj_ball_wybicie.x=x-34;
        else obj_ball_wybicie.x=x+14;
        }
    else if (throwing or prejump)
        {
        obj_ball_wybicie.y=y-50;
        if (global.obrotp1=1) obj_ball_wybicie.x=x-30;
        else obj_ball_wybicie.x=x+10;
        }
    else if (global.zbiorka)
        {
        obj_ball_wybicie.y=y;
        obj_ball_wybicie.x=x-11;
        } 
    else
        {
        obj_ball_wybicie.y=y+16;
        if (global.obrotp1=1) obj_ball_wybicie.x=x-44;
        else obj_ball_wybicie.x=x+24;
        } 
    
} 
else if (!have_ball)
{
    if (jumping)
    {   
        if (global.obrotp1==0)
        {
            obj_blok.phy_position_y=y-65;
            obj_blok.phy_position_x=x-5;
        }
        else if (global.obrotp1==1)
        {
            obj_blok.phy_position_y=y-65;
            obj_blok.phy_position_x=x-7;
        }
    }
    else if(!obj_player_2.jumping)
    {
        obj_blok.phy_position_y=0;
        obj_blok.phy_position_x=0;
    }
}
if (jumping or prejump) phy_speed_x/=1.2;
//Zbiorka
if (keyboard_check_pressed(global.p1down))
    {
    if (collision_rectangle( x-30, y-30, x+30, y+70, obj_ball, false, false ))
        {
        scr_prezbiorka("p1");
        view_visible[1]=true;
        }
    }        
//Ruch w lewo (Priorytet)
if (keyboard_check(global.p1left))
    {
    if (!prejump)
        {
        if (!jumping)
            {
            image_xscale=-1;
            global.obrotp1=1;
            }
        }
    
    if (throwing =false)
        { 
        global.zbiorka=false;
        physics_apply_force(x,y,-move_speed,0);
        if (phy_speed_x&lt;-1 and !jumping and !prejump)
            {
            if (have_ball) sprite_index=Vspr_bieg_koz;
            else sprite_index=Vspr_bieg_woball; 
            }
        }
    if (throwing and jumping )
        {
        physics_apply_force(x,y,-move_speed,0);
        }
    }
//Ruch w prawo
else if (keyboard_check(global.p1right))
    {
    if (!jumping)
        {
        if (!prejump)
            {
            image_xscale=1;
            global.obrotp1=0;
            }
        }
    
    if (throwing=false) 
        {
        global.zbiorka=false;
        physics_apply_force(x,y,move_speed,0);
        if (phy_speed_x&gt;1 and !jumping and !prejump)
            {
            if (have_ball) sprite_index=Vspr_bieg_koz;
            else sprite_index=Vspr_bieg_woball; 
            } 
        }
    if (throwing and jumping )
        {
        physics_apply_force(x,y,move_speed,0);
        }
    }   
//Zatrzymanie
if (keyboard_check_released(global.p1left) or keyboard_check_released(global.p1right))
    {
    if (!throwing and !jumping and !prejump)
        {
        if (have_ball) sprite_index=Vspr_idle;
        else sprite_index=Vspr_idle_woball; 
        } 
    phy_speed_x/=2.5;
    }
//rzut
if (have_ball)
    {
    if (keyboard_check_pressed(global.p1throw))
        {
        obj_controller.alarm[0]=45;
        throwing=true;
        }
    if (keyboard_check(global.p1throw))
        {
        if (!jumping and !prejump)
            {
            phy_speed_x/=1.2;
            sprite_index=Vspr_prerzut;
            }
        else if(!prejump and jumping) sprite_index=Vspr_skok;
        }
    if (keyboard_check_released(global.p1throw) )
        {
        global.rzutready=true;
        if (global.rzutk==1)
            global.rzutmoc=45-obj_controller.alarm[0];
        else
            global.rzutmoc=obj_controller.alarm[0];
        global.ball="wyrzut";
        view_visible[1]=false;
        view_visible[0]=true;
        if (global.obrotp1=0)
            {
            instance_create(x+35,y-52,obj_ball);
            }
        else if (global.obrotp1=1)
            {
            instance_create(x-35,y-52,obj_ball);
            }
        if (!jumping)sprite_index=Vspr_rzut;
        else sprite_index=Vspr_skok_rzut;

        throwing=false;        
        have_ball=false;
        global.rzutk=1;
        
        alarm[0]=30;
        
        }
    }       
//wyskok
if (keyboard_check_pressed(global.p1up) and !jumping)
    {
    if (place_meeting(x,y+1,obj_collision))
        {
        prejump=true;
        alarm[1]=20;
        if (have_ball)
            {
            sprite_index=Vspr_wyskok;
            image_index=0;
            }
        else
            {
            sprite_index=Vspr_wyskok_woball;
            image_index=0;
            }
        }
    }
//Wybicie
if (keyboard_check_released(global.p1wybicie) and !have_ball and !keyboard_check(global.p1left) and !keyboard_check(global.p1right))
    {
    if (jumping)
        {
        sprite_index=Vspr_wybicie_midair;
        image_index=1;
        alarm[2]=35
         py=y-50;
        if (global.obrotp1=1)  px=x-50;
        else if (global.obrotp1=0) px=x+20;
        if (collision_rectangle( px,py,px+40,py+50, obj_stojak, false, false ))
            {
            obj_controller.alarm[1]=10;
            }
        else if (collision_rectangle(px,py,px+40,py+50,obj_ball_wybicie, false, false ))
            {
            obj_controller.alarm[1]=10;
            }
        }
    else
        {
        sprite_index=Vspr_wybicie_ziemia;
        image_index=1;
        alarm[2]=35
        py=y-5;
        if (global.obrotp1=1)  px=x-60;
        else if (global.obrotp1=0) px=x+10;
        if (collision_rectangle( px,py,px+50,py+25, obj_stojak, false, false ))
            {
            obj_controller.alarm[1]=10;
            }
        else if (collision_rectangle(px,py,px+50,py+25,obj_ball_wybicie, false, false ))
            {
            obj_controller.alarm[1]=10;
            }
        }
    }
if (place_meeting(x,y+1,obj_spod))
jumping=false;
else jumping=true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_collision">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Uwotmate
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>2</PhysicsObjectShape>
  <PhysicsObjectDensity>1</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.0500000007450581</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>2</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>71.25,37.5</point>
    <point>86.25,67.5</point>
    <point>86.25,138.75</point>
    <point>45,138.75</point>
    <point>45,75</point>
    <point>63.75,41.25</point>
  </PhysicsShapePoints>
</object>
