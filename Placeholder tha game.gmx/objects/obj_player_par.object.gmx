<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_idle_woball</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>player=1;
player_name=obj_player;
blok=obj_blok;
input=0;
//Sta≈Çe
energy=100;
energy_regen=100;
energy_max=100;
cdwybycie=true;
image_speed=0.185;
move_speed=2200;
phy_fixed_rotation=true;
max_xspeed=6.5;
max_xspeed_woball=7.5;
prejump=false;
jumping=false;
jump_force=-1200;
jump_force_woball=-1250;
have_ball=false;
throwing=false;
obrot=0;
obrotable=true;
lastspeed=0;
//Sprity
Vspr_idle=spr_idle;
Vspr_bieg_koz=spr_bieg_koz;
Vspr_bieg_woball=spr_bieg_woball;
Vspr_idle_grab=spr_idle_grab;
Vspr_idle_woball=spr_idle_woball;
Vspr_prerzut=spr_prerzut;
Vspr_rzut=spr_rzut;
Vspr_skok=spr_skok;
Vspr_skok_rzut=spr_skok_rzut;
Vspr_skok_woball=spr_skok_woball;
Vspr_wybicie_midair=spr_wybicie_midair;
Vspr_wybicie_midair_idle=spr_wybicie_midair_idle;
Vspr_wybicie_ziemia=spr_wybicie_ziemia;
Vspr_wyskok=spr_wyskok;
Vspr_wyskok_woball=spr_wyskok_woball;
//kopiownie sterowania
Kleft=global.p1left;
Kright=global.p1right;
Kup=global.p1up;
Kdown=global.p1down;
Kthrow=global.p1throw;
Kwybicie=global.p1wybicie;

//sterowanie pad/keybaord

ch_Kleft=keyboard_check(Kleft);
ch_Kright=keyboard_check(Kright);
ch_Kleft_r=keyboard_check_released(Kleft);
ch_Kright_r=keyboard_check_released(Kright);
ch_Kup_p=keyboard_check_pressed(Kup);
ch_Kdown_r=keyboard_check_pressed(Kdown);
ch_Kthrow_p=keyboard_check_pressed(Kthrow);
ch_Kthrow=keyboard_check(Kthrow);
ch_Kthrow_r=keyboard_check_released(Kthrow);
ch_Kwybicie_p=keyboard_check_pressed(Kwybicie);





</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cooldown na Wybicie
cdwybycie=true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Balldrop decide
if (obj_player.have_ball) 
{
    with (obj_player) scr_balldrop();
}
else if (obj_player_2.have_ball)
{
    with (obj_player_2) scr_balldrop();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Wybicie sprite choser
if (jumping) sprite_index=Vspr_wybicie_midair_idle;
else sprite_index=Vspr_idle_woball;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Jump
jumping=true;
prejump=false;
    if (have_ball)
        {
        sprite_index=Vspr_skok;
        physics_apply_impulse(x,y,0,jump_force);
        }
    else
        {
        physics_apply_impulse(x,y,0,jump_force_woball);
        sprite_index=Vspr_skok_woball;
        }
    
    alarm[0]=5;
    audio_play_sound(sd_pilka,0,0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Jump restarter
if (!jumping and !prejump)
{
    if (have_ball)
        { 
        sprite_index=Vspr_idle ;
        if (player==1)
            global.fouls1++;
        else if (player==2)
            global.fouls2++;
        show_debug_message("FAUUL");
        }
    else sprite_index=Vspr_idle_woball;
    obrotable = true;
}

else 
    {
    alarm[0]=5;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    
    ch_Kleft=( keyboard_check(Kleft) or gamepad_button_check(player-1 , gp_padl) or gamepad_axis_value(player-1, gp_axislh)&lt;0);
    ch_Kright=(keyboard_check(Kright) or gamepad_button_check(player-1 , gp_padr) or gamepad_axis_value(player-1, gp_axislh)&gt;0);
    //ch_Kleft_r=(keyboard_check_released(Kleft) or gamepad_button_check_released(player-1 , gp_padl));
    //ch_Kright_r=(keyboard_check_released(Kright) or gamepad_button_check_released(player-1 , gp_padr));
    ch_Kup_p=(keyboard_check_pressed(Kup) or gamepad_button_check_pressed(player-1 , gp_face1));
    ch_Kdown_p=(keyboard_check_pressed(Kdown) or gamepad_button_check_pressed(player-1 , gp_padd) or gamepad_button_check_pressed(player-1 , gp_stickl));
    ch_Kthrow_p=(keyboard_check_pressed(Kthrow) or gamepad_button_check_pressed(player-1 , gp_face2));
    ch_Kthrow=(keyboard_check(Kthrow) or gamepad_button_check(player-1 , gp_face2));
    ch_Kthrow_r=(keyboard_check_released(Kthrow) or gamepad_button_check_released(player-1,gp_face2));
    ch_Kwybicie_p=(keyboard_check_pressed(Kwybicie) or gamepad_button_check_pressed(player-1 , gp_face3));

    
if (have_ball)
    {
    move_speed=3200;
    phy_speed_x=max(min(phy_speed_x,max_xspeed),-max_xspeed);
    }
else
    {
    move_speed=3400; 
    phy_speed_x=max(min(phy_speed_x,max_xspeed_woball),-max_xspeed_woball);
    }


//wybijarka
if (have_ball)
{
    if (jumping)
        {
        obj_ball_wybicie.y=y-56;
        if (obrot==1) obj_ball_wybicie.x=x-34;
        else obj_ball_wybicie.x=x+14;
        }
    else if (throwing or prejump)
        {
        obj_ball_wybicie.y=y-50;
        if (obrot==1) obj_ball_wybicie.x=x-30;
        else obj_ball_wybicie.x=x+10;
        }
    else if (global.zbiorka)
        {
        obj_ball_wybicie.y=y;
        obj_ball_wybicie.x=x-11;
        } 
    else
        {
        obj_ball_wybicie.y=y+16;
        if (obrot==1) obj_ball_wybicie.x=x-44;
        else obj_ball_wybicie.x=x+24;
        } 
    
} 
else if (!have_ball)
{
    if (jumping)
    {   
        if (obrot==0)
        {
            blok.phy_position_y=y-65;
            blok.phy_position_x=x-5;
        }
        else if (obrot==1)
        {
            blok.phy_position_y=y-65;
            blok.phy_position_x=x-7;
        }
    }
    else 
    {
        blok.phy_position_y=0;
        blok.phy_position_x=0;
    }
}


if (jumping or prejump) phy_speed_x/=1.1;


//Zbiorka
if (ch_Kdown_p )
    {
    if (collision_rectangle( x-30, y-30, x+30, y+70, obj_ball, false, false ))
        {
        scr_prezbiorka();
        }
    }        
//Ruch w lewo (Priorytet)
if (ch_Kleft)
    {

    
    if (obrotable)
    {
        image_xscale=-1;
        obrot=1;
    }

    if (have_ball)  global.zbiorka=false;   
          
    if (!throwing)
        { 
            if (obrotable)
            {
                if (have_ball) 
                {
                sprite_index=Vspr_bieg_koz;
                }
                else sprite_index=Vspr_bieg_woball; 
            }
            physics_apply_force(x,y,-move_speed,5);
        }
    else if (throwing and jumping)
        physics_apply_force(x,y,-move_speed,5);
    }
//Ruch w prawo
else if (ch_Kright)
    {

    
    if (obrotable)
    {
        image_xscale=1;
        obrot=0;
    }
    
    if (have_ball)  global.zbiorka=false;      
    if (throwing=false) 
        {
            if (obrotable)
            {
                if (have_ball) 
                {
                sprite_index=Vspr_bieg_koz;
                }
                else sprite_index=Vspr_bieg_woball; 
            }
            physics_apply_force(x,y,move_speed,5); 
        }
    else if (throwing and jumping)
        physics_apply_force(x,y,move_speed,5);
        
    }   
//Zatrzymanie
if phy_speed_x=0 //(ch_Kleft_r or ch_Kright_r)
    {
    if (!throwing and !jumping and !prejump and obrotable)
        {
        if (have_ball) sprite_index=Vspr_idle;
        else sprite_index=Vspr_idle_woball; 
        } 
    }
//rzut
if (have_ball)
    {
    if (ch_Kthrow_p)
        {
        obj_controller.alarm[0]=45;
        throwing=true;
        }
    if (ch_Kthrow)
        {
        if (!prejump and jumping) sprite_index=Vspr_skok;
        
        else if (!jumping and !prejump)
            {
            phy_speed_x/=1.1;
            sprite_index=Vspr_prerzut;
            }
        }
    if (ch_Kthrow_r )
        {
        global.rzutready=true;
        if (global.rzutk==1)
            global.rzutmoc=45-obj_controller.alarm[0];
        else
            global.rzutmoc=obj_controller.alarm[0];
            
        
        global.ball="wyrzut";
        
        obj_camera.following=obj_ball;
        
        if (obrot=0)
            {
            instance_create(x+35,y-52,obj_ball);
            }
        else if (obrot=1)
            {
            instance_create(x-35,y-52,obj_ball);
            }
            
        depth=1;
        
        if (!jumping)sprite_index=Vspr_rzut;
        else sprite_index=Vspr_skok_rzut;

        throwing=false;        
        have_ball=false;
        global.rzutk=1;
        
        obj_ball_wybicie.x=0;
        obj_ball_wybicie.y=0;
        
        alarm[0]=25;
        
        }
    }       
//wyskok
if (ch_Kup_p and !jumping)
    {
    if (place_meeting(x,y+1,obj_collision))
        {
        obrotable = false;
        prejump=true;
        alarm[1]=15;
        if (have_ball)
            {
            sprite_index=Vspr_wyskok;
            image_index=0;
            }
        else
            {
            sprite_index=Vspr_wyskok_woball;
            image_index=0;
            }
        } 
    } 
//Wybicie
if (ch_Kwybicie_p and !have_ball and cdwybycie)
    {
    if (jumping)
        {
        sprite_index=Vspr_wybicie_midair;
        image_index=0;
        alarm[2]=35;
        py=y-50;
        if (obrot=1)  px=x-50;
        else if (obrot=0) px=x+20;
        if (collision_rectangle(px,py,px+40,py+50,obj_ball_wybicie, false, false ))
            {
            alarm[3]=10;
            }
        }
    else
        {
        sprite_index=Vspr_wybicie_ziemia;
        image_index=0;
        alarm[2]=35;
        py=y-5;
        if (obrot=1)  px=x-60;
        else if (obrot=0) px=x+10;
        if (collision_rectangle(px,py,px+50,py+25,obj_ball_wybicie, false, false ))
            {
            alarm[3]=10;
            }
        }
    cdwybycie=false;
    alarm[4]=room_speed*0.75;
    }
//Skakanie sure maker
if (place_meeting(x,y+1,obj_spod))
jumping=false;
else jumping=true;






</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_collision">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Uwotmate
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>2</PhysicsObjectShape>
  <PhysicsObjectDensity>1</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.0500000007450581</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>2</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>71.25,37.5</point>
    <point>86.25,67.5</point>
    <point>86.25,138.75</point>
    <point>45,138.75</point>
    <point>45,75</point>
    <point>63.75,41.25</point>
  </PhysicsShapePoints>
</object>
