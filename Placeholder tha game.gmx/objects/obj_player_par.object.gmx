<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_idle_woball</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///physcics back online
    dunk=false;
    phy_active=true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cooldown na Wybicie
cdwybycie=true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///*Balldrop decide
if (obj_player.have_ball) 
{
    with (obj_player) scr_balldrop();
}
else if (obj_player_2.have_ball)
{
    with (obj_player_2) scr_balldrop();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Wybicie off maker
if (jumping) sprite_index=Vspr_wybicie_midair_idle;
wybicie=false;
obrotable = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Jump
jumping=true;
prejump=false;
    if (have_ball)
        {
        sprite_index=Vspr_skok;
        physics_apply_impulse(x,y,0,jump_force);
        }
    else
        {
        physics_apply_impulse(x,y,0,jump_force_woball);
        sprite_index=Vspr_skok_woball;
        }
    
    alarm[0]=5;
    audio_play_sound(sd_pilka,0,0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Jump restarter
if (!jumping and !prejump)
{
    if (have_ball)
        { 
        sprite_index=Vspr_idle ;
        }
    else sprite_index=Vspr_idle_woball;
    obrotable = true;
    if (foul)
    {
        if (player==1)
            global.fouls1++;
        else if (player==2)
            global.fouls2++;
            
        scr_pop_up(60,"foul");
        show_debug_message("FAUUL");
    }
}

else 
    {
    alarm[0]=5;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!bot)
{    
    ch_Kleft=( keyboard_check(Kleft) or gamepad_button_check(player-1 , gp_padl) or gamepad_axis_value(player-1, gp_axislh)&lt;0);
    ch_Kright=(keyboard_check(Kright) or gamepad_button_check(player-1 , gp_padr) or gamepad_axis_value(player-1, gp_axislh)&gt;0);
    //ch_Kleft_r=(keyboard_check_released(Kleft) or gamepad_button_check_released(player-1 , gp_padl));
    //ch_Kright_r=(keyboard_check_released(Kright) or gamepad_button_check_released(player-1 , gp_padr));
    ch_Kup_p=(keyboard_check_pressed(Kup) or gamepad_button_check_pressed(player-1 , gp_face1));
    //ch_Kdown_p=(keyboard_check_pressed(Kdown) or gamepad_button_check_pressed(player-1 , gp_padd) or gamepad_button_check_pressed(player-1 , gp_stickl));
    ch_Kthrow_p=(keyboard_check_pressed(Kthrow) or gamepad_button_check_pressed(player-1 , gp_face2));
    ch_Kthrow=(keyboard_check(Kthrow) or gamepad_button_check(player-1 , gp_face2));
    ch_Kthrow_r=(keyboard_check_released(Kthrow) or gamepad_button_check_released(player-1,gp_face2));
    ch_Kwybicie_p=(keyboard_check_pressed(Kwybicie) or gamepad_button_check_pressed(player-1 , gp_face3));
}
dtohoop=distance_to_object(obj_obrecz);

//Skakanie sure maker
if (place_meeting(x,y+1,obj_spod) and !dunk)
jumping=false;
else jumping=true;
    
if (have_ball)
    {
    move_speed=3800;
    phy_speed_x=max(min(phy_speed_x,max_xspeed),-max_xspeed);
    }
else
    {
    move_speed=4000; 
    phy_speed_x=max(min(phy_speed_x,max_xspeed_woball),-max_xspeed_woball);
    }
    
//wybijarka
if (have_ball)
{
    if (jumping)
    {
        obj_ball_wybicie.y=y-56;
        if (obrot==1)
        { 
            obj_ball_wybicie.x=x-34;
        }
        else 
        {
            obj_ball_wybicie.x=x+14;
        }
    }
    else if (throwing or prejump)
        {
        obj_ball_wybicie.y=y-50;
        if (obrot==1) obj_ball_wybicie.x=x-30;
        else obj_ball_wybicie.x=x+10;
        }
    /*else if (global.zbiorka)
        {
        obj_ball_wybicie.y=y;
        obj_ball_wybicie.x=x-11;
        } */
    else
        {
        obj_ball_wybicie.y=y+16;
        if (obrot==1) obj_ball_wybicie.x=x-44;
        else obj_ball_wybicie.x=x+24;
        }
    //So that it wont bug out
    //blok.phy_position_y=0;
    //blok.phy_position_x=0;
} 
/*else if (!have_ball)
{
    if (jumping and !wybicie)
    {   
        if (obrot==0)
        {
            blok.phy_position_y=y-65;
            blok.phy_position_x=x-5;
        }
        else if (obrot==1)
        {
            blok.phy_position_y=y-65;
            blok.phy_position_x=x-7;
        }
    }
    else 
    {
        blok.phy_position_y=0;
        blok.phy_position_x=0;
    }
}*/


if ((jumping or prejump) and !dunk) phy_speed_x/=1.1;


//Zbiorka
if (instance_exists(obj_ball))
    {
    if (collision_rectangle( x-25, y-30, x+25, y+60, obj_ball, false, false ) and obj_ball.pickup)
        {
        scr_prezbiorka();
        }
    }        
//Ruch w lewo (Priorytet)
if (ch_Kleft and !dunk)
    {

    
    if (obrotable)
    {
        image_xscale=-1;
        obrot=1;
    }

    if (have_ball)  global.zbiorka=false;   
          
    if (!throwing and !wybicie)
        { 
            if (phy_speed_x==0 and !jumping ) 
            {
                part_type_scale(partsys, -1, 1);
                part_particles_create(partsys,x+30,y+70,partplayer,1);
            }
            if (obrotable)
            {
                if (have_ball) 
                {
                sprite_index=Vspr_bieg_koz;
                }
                else sprite_index=Vspr_bieg_woball; 
            }
            physics_apply_force(x,y,-move_speed,5);
        }
    else if (throwing and jumping)
        physics_apply_force(x,y,-move_speed,5);
    }
//Ruch w prawo
else if (ch_Kright and !dunk)
    {

    
    if (obrotable)
    {
        image_xscale=1;
        obrot=0;
    }
    
    if (have_ball)  global.zbiorka=false;      
    if (!throwing and !wybicie) 
        {
            if (phy_speed_x==0 and !jumping) 
            {
                part_type_scale(partsys, 1, 1);
                part_particles_create(partsys,x-30,y+70,partplayer,1);
            }
            if (obrotable)
            {
                if (have_ball) 
                {
                sprite_index=Vspr_bieg_koz;
                }
                else sprite_index=Vspr_bieg_woball; 
            }
            physics_apply_force(x,y,move_speed,5); 
        }
    else if (throwing and jumping)
        physics_apply_force(x,y,move_speed,5);
        
    }   
//Zatrzymanie
if phy_speed_x=0 
    {
    if (!throwing and !jumping and !prejump and obrotable and !wybicie and !ch_Kright and !ch_Kleft/*and !global.zbiorka*/)
        {
        if (have_ball) sprite_index=Vspr_idle;
        else sprite_index=Vspr_idle_woball; 
        } 
    }
//Rzut
if (have_ball and !dunk)
    {
    if (ch_Kthrow_p )
        {
        global.rzutk=1;
        obj_controller.alarm[0]=45;
        throwing=true;
        }
    if (ch_Kthrow)
        {
        if (!prejump and jumping) 
            sprite_index=Vspr_skok;
        else if (!jumping and !prejump)
            {
            phy_speed_x/=1.1;
            sprite_index=Vspr_prerzut;
            }
        }
    if (ch_Kthrow_r )
        {
        if (!global.insiderzut)
        {
            foul=false;
            global.rzutready=true;
            if (global.rzutk==1)
                global.rzutmoc=45-obj_controller.alarm[0];
            else
                global.rzutmoc=obj_controller.alarm[0];
                
            obj_camera.following=obj_ball;
            global.ball="wyrzut";
            
            
            if (obrot=0)
                {
                instance_create(x+35,y-52,obj_ball);
                }
            else if (obrot=1)
                {
                instance_create(x-35,y-52,obj_ball);
                }
                
            depth=1;
            
            if (!jumping)sprite_index=Vspr_rzut;
            else sprite_index=Vspr_skok_rzut;
    
            throwing=false;        
            have_ball=false;
            global.rzutk=1;
            
            obj_ball_wybicie.x=0;
            obj_ball_wybicie.y=0;
            
            alarm[0]=25;
            }
        else
             throwing=false;
        }
    }
//Wybicie
else if (!have_ball and !dunk)
{
    if (ch_Kthrow_p and cdwybycie)
    {
    
    if (jumping and !dunk)
        {
        sprite_index=Vspr_wybicie_midair;
        image_index=0;
        alarm[2]=35;
        py=y-50;
        if (obrot=1)  px=x-50;
        else if (obrot=0) px=x+20;
        if (collision_rectangle(px,py,px+40,py+50,obj_ball_wybicie, false, false ))
            {
            alarm[3]=10;
            }
        }
    else 
        {
        phy_speed_x/=10;
        sprite_index=Vspr_wybicie_ziemia;
        image_index=0;
        alarm[2]=35;
        py=y-5;
        if (obrot=1)  px=x-60;
        else if (obrot=0) px=x+10;
        if (collision_rectangle(px,py,px+50,py+25,obj_ball_wybicie, false, false ))
            {
            alarm[3]=10;
            }
        }
        wybicie=true;
        cdwybycie=false;
        alarm[4]=room_speed*0.75;
        obrotable = false;
    }
}      
//wyskok
if (ch_Kup_p)
{
    if (!jumping and !prejump)
    {
        if (place_meeting(x,y+1,obj_collision))
            {
            obrotable = false;
            prejump=true;
            alarm[1]=15;
            if (have_ball)
                {
                sprite_index=Vspr_wyskok;
                image_index=0;
                foul=true;
                }
            else
                {
                sprite_index=Vspr_wyskok_woball;
                image_index=0;
                }
            }
    }
    else if (jumping and !dunk and have_ball)
    {
        show_debug_message("WSAD ATTEMPT");
        dunk = true;
        timeline_position=0;
        timeline_running=true;
    } 
} 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_collision">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Uwotmate
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (have_ball)
{
    image= floor(image_index);
    if (sprite_index=Vspr_skok)
    {
        ball_y=y-46;
        if (obrot==1)
            ball_x=x-24;
        else 
            ball_x=x+24;
    }
    else if (sprite_index=Vspr_bieg_koz)
    {
        if (obrot==1) ball_x=x-28;
        else ball_x=x+28;

        if (image==0)
            ball_y=y+26;
        else if (image==1)
            ball_y=y+42;
        else if (image==2)
            ball_y=y+60;
        else if (image==3)
            ball_y=y+54;
        else if (image==4)
            ball_y=y+42;
        else if (image==5)
            ball_y=y+32;
        else if (image==6)
            ball_y=y+26;
        else if (image==7)
            ball_y=y+44;
        else if (image==8)
            ball_y=y+60;
        else if (image==9)
            ball_y=y+54;
        else if (image==10)
            ball_y=y+44;
        else if (image==11)
            ball_y=y+34;
    
    }
    else if (sprite_index=Vspr_idle_grab)
    {
        ball_y=y+18;
        ball_x=x;
    }
    else if (sprite_index=Vspr_prerzut)
    {
        ball_y=y-40;
        if (obrot==1) ball_x=x-20;
        else ball_x=x+20;
    }
    else if (sprite_index=Vspr_wyskok)
    {
        if (obrot==1)
        {
            if(image&gt;=0 and image&lt;4)
            {
                ball_x=x-36;
                ball_y=y-18;
            }
            else
            {
                ball_x=x-20;
                ball_y=y-40;
            }
            
        }
        else
        {
            if(image&gt;=0 and image&lt;4)
            {
                ball_x=x+36;
                ball_y=y-18;
            }
            else
            {
                ball_x=x+20;
                ball_y=y-40;
            }
        }
    }
    else if (sprite_index=Vspr_dunk)
    {
        if (obrot==1)
        {
            if (image=0)
            {
                ball_x=0;
                ball_y=0;
            }
            else if (image=1)
            {
                ball_x=x+17;
                ball_y=y-38;
            }
            else if (image=2)
            {
                ball_x=x-3;
                ball_y=y-56;
            }
            else if (image=3)
            {
                ball_x=x-30;
                ball_y=y-34;
            }
            else if (image=4)
            {
                ball_x=x-44;
                ball_y=y-12;
            }
        }
        else
        {
            if (image=0)
            {
                ball_x=0;
                ball_y=0;
            }
            else if (image=1)
            {
                ball_x=x-17;
                ball_y=y-38;
            }
            else if (image=2)
            {
                ball_x=x+3;
                ball_y=y-56;
            }
            else if (image=3)
            {
                ball_x=x+30;
                ball_y=y-34;
            }
            else if (image=4)
            {
                ball_x=x+44;
                ball_y=y-12;
            }
            
        }
    }
    else if (sprite_index=Vspr_dunk_flight)
    {
        ball_y=y-38;
        if (obrot==1) ball_x=x-17;
        else ball_x=x+17;
    }
    else if (sprite_index=Vspr_idle)
    {
        if (obrot==1) ball_x=x-34;
        else ball_x=x+34;

        if (image==0)
            ball_y=y+26;
        else if (image==1)
            ball_y=y+42;
        else if (image==2)
            ball_y=y+60;
        else if (image==3)
            ball_y=y+42;
    }

    draw_sprite(scr_get_ball_skin_by_id(global.skinball),0,ball_x,ball_y);
}
draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>2</PhysicsObjectShape>
  <PhysicsObjectDensity>1</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.0500000007450581</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>2</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>71.25,37.5</point>
    <point>86.25,67.5</point>
    <point>86.25,138.75</point>
    <point>45,138.75</point>
    <point>45,75</point>
    <point>63.75,41.25</point>
  </PhysicsShapePoints>
</object>
